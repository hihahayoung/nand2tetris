// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:

    // Check if the instruction is Atype or Ctype
    Not(in=instruction[15], out=Atype);
    Not(in=Atype, out=Ctype);

    // If the instruction is Atype and the destination is ARegister, ALU output goes to ARegister
    And(a=Ctype, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=ALUOut, sel=ALUtoA, out=ARegIn);

    // If the instruction is Atype or the destination is ARegister, the instruction goes to ARegister
    Or(a=Atype, b=instruction[5], out=loadA);
    ARegister(in=ARegIn, load=loadA, out=ARegOut);

    // See the comp of the instruction to decide whether to calculate A or M
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUYInput);

    // Handle the DRegister
    // If the instruction is Ctype or the destination is DRegister, ALU output goes to DRegister
    And(a=Ctype, b=instruction[4], out=loadD);
    DRegister(in=ALUOut, load=loadD, out=DRegOut);
    

    // ALU
    ALU(x=DRegOut, y=ALUYInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=ZRout, ng=NGout, out=ALUOut);


    // Jump conditions
    Or(a=ZRout, b=NGout, out=ZRorNG);
    Not(in=ZRorNG, out=posNum);

    // Check the instruction and the condition
    And(a=instruction[2], b=NGout, out=JLT);
    And(a=instruction[1], b=ZRout, out=JEQ);
    And(a=instruction[0], b=posNum, out=JGT);

    // If even one of the conditions is true, jump!
    Or(a=JLT, b=JEQ, out=JLE);
    Or(a=JLE, b=JGT, out=jumpToA);
    And(a=Ctype, b=jumpToA, out=PCload);
    Not(in=PCload, out=PCinc);

    // PC
    // Load address that is store in ARegister
    // If jump is not specified, just increase the bit
    PC(in=ARegOut, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);

    // CP out
    And(a=Ctype, b=instruction[3], out=writeM);
	Or16(a=false, b=ARegOut, out[0..14]=addressM);
	Or16(a=false, b=ALUOut, out=outM);

}
